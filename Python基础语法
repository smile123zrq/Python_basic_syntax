Python语法：https://www.nowcoder.com/tutorial/10005/dc2c82d6557548beb0e2252869be13d8

注释：
Python中单行注释以 # 开头，多行注释用三个单引号 ''' 或者三个双引号 """ 将注释括起来。

反斜杠可以用来转义，使用r可以让反斜杠不发生转义。。 如 r"this is a line with \n" 则\n会显示，并不是换行。

运算符：
算数运算符：+, -, *, /, //（向下取整）, %（取余）, **（次方）
比较运算符：>, <, >=, <=, ==, !=  (返回True或False)
赋值运算符：=, +=, -=, *=, /=, %=, **=, //==  (没有自加或自减 x++)
逻辑运算符：and, or, not  (使用True或False进行逻辑判断，返回True或False)
成员运算符：in, not in    (判断一个成员是否在一个序列中,字符串，列表,元组，字典，集合那些都行，返回True或False。 x in a)
身份运算符：is, not is    (用于比较两个对象的存储单元（地址），返回True或False，id()获取对象内存地址)

可以使用 del x 语句来删除一些对象，字符串，数字，列表中的值都可以删除


数字：
x = 1
x = 0
整型， 浮点型， 复数
数学函数：abs(x)          返回x的绝对值
        ceil(x)         返回x的向上取整 math.ceil(x)
        floor(x)        返回x的向下取整 math.floor(x)
        exp(x)          返回 e^x , math.exp(x)
        fabs(x)         返回x的绝对值， math.fabs(x)
        log(x)          返回x的自然对数 math.log(x) ln(x)
        log10(x)        返回以10为底的x的对数 math.log10(x)
        max(x, y, z,...)返回最大值，参数可以为序列
        mix(x, y, z,...)返回最小值，参数可以为序列
        modf(x)         返回x的整数部分与小数部分(浮点) math.modf(x)
        pow(x, y)       返回x的y次方 math.pow(x, y)
        round(x, y)     返回浮点数x的四舍五入值，y表示小数位数
        sqrt(x)         返回x的平方根 math.sqrt(x)
随机数函数：choice(seq)   返回seq中随机的一个元素，seq可以是列表，元组或字符串 random.choice(seq)
          randrange(x, y, z)从指定的范围[x,y)随机返回一个整数，z为步长 random.randrange(x, y, z)
          random()      返回[0,1)内的一个随机浮点数 random.random()
          shuffle(lst)  将列表lst中的元素随机排序 random.shuffle(lst)
          uniform(x, y) 返回在[x,y]内的一个随机浮点数 random.uniform(x, y)
三角函数：https://www.nowcoder.com/tutorial/10005/aca8394a799040f69d57504245ddc88f
数学常量：pi     圆周率pi   math.pi
        e      自然常数e   math.e



字符串：
str1 = 'Hello World!'
str2 = ''
字符串运算符： []访问字符串     s[0]    0从左往右，-1从右往左
            [:]截取字符串     s[x:y:z]  截取范围[x,y),z为步长 切片
            + 拼接字符串     s1 + s2
            * 复制字符串     s2 = s1 * n  n为复制次数
            in, not in     判断给定的字符是否在字符串中，返回True或False
            r              原始字符串，r'Hell\n' 不会发生转义
转义字符：\n      换行
        \v      纵向制表符
        \t      横向制表符
        \r      回车
字符串格式化：通过{}与:  str.format() 来格式化字符串
           https://www.nowcoder.com/tutorial/10004/f7cf4da35e194775a4dd77b17c1fa193
字符串函数：capitalize()      将字符串的第一个字符转化为大写 str.capitalize()
          swapcase()        将字符串中的大写字符转化为小写，小写转化为大写 str.swapcase()
          title()           将字符串中所有单词首个字母转化为大写，其余字母均为小写 str.title()
          lower()           将字符串中的大写字符转化为小写字符 str.lower()
          upper()           将字符串中的小写字符转化为大写字符 str.upper()
          count(x, y, z)    返回子串x在字符串中出现的次数，y为开始检索位置，z为结束位置 str.count(x,y,z)
          startswith(x,y,z) 判断字符串是否以x开头，返回True或False，y为开始检索位置，z为结束位置 str.startswith(x,y,z)
          endswith(x, y, z) 判断字符串是否以x结尾，返回True或False，y为开始检索位置，z为结束位置 str.endswith(x,y,z)
          find(x, y ,z)     检索x是否在字符串中，存在则返回起始位置，不存在，返回-1  str.find(x, y, z)
          rfind(x, y, z)    类似于find()，只不过是从右边开始检索
          index(x, y, z)    跟find()类似，只不过如果不存在就会抛出异常
          rindex(x, y, z)   跟index()类似，只不过是从右边开始检索
          isalnum()         检测字符串是否全由字母与数字组成，返回True或False,汉字也算字母 str.isalnum()
          isalpha()         检测字符串是否只由字母或数字组成,不能都存在，返回True或False str.isalpha()
          isdigit()         检测字符串是否只由数字组成，返回True或False str.isdigit()
          islower()         检测字符串是否由小写字母组成，可以有空格那些，返回True或False str.islower()
          isupper()         检测字符串是否由大写字母组成，可以有空格那些，返回True或False str.islower()
          isnumeric()       检测字符串是否只由数字组成，返回True或False str.isnumeric()
          isspace()         检测字符串是否都由空白字符组成，返回True或False str.isspace()
          istitle()         检测字符串中的所有单词是否首字母为大写，其余字母为小写，返回True或False str.istitle()
          join(seq)         将序列中的元素以指定的字符连接成一个新的字符串。seq可以是列表，元组或字符串 'str'.join(seq)
          len(seq)          返回对象的长度，可以为字符串，列表，元组等 len(seq)
          ljust(x, y)       返回原字符串左对齐，x表示字符串长度，y表示填充字符 str.ljust(x, y)
          center(x, y)      返回一个自定宽度居中的字符串，x为宽度，y为填充字符 str.center(x, y)
          rjust(x, y)       返回原字符串右对齐，x表示字符串长度，y表示填充字符 str.rjust(x, y)
          lstrip(str1)      截掉字符串左边的空格或指定字符  str.lstrip(str1)
          rstrip(str1)      截掉字符串右边的空格或指定字符  str.rstrip(str1)
          strip(str1)       在字符串上执行lstrip()与rstrip()
          max(str)          返回字符串中的最大字母 max(str)
          min(str)          返回字符串中的最小字母 min(str)
          replace(x, y, z)  将字符串中的x字符串替换成y字符串，z表示最大替换次数 str.replace(x,y,z)
          split(x, y)       通过指定的分隔符x，对字符串进行切片，y表示分割次数。返回分割后的字符串列表 str.split(x,y)
          splitlines(x)     返回一个包括各行作为元素的列表，x为False则不包含换行符，True则包含换行符 str.splitlines(x)
          isdecimal()       检测字符串是否只包含十进制字符，返回True或False str.isdecimal()



列表：
元素有序，可修改，可重复
list1 = [1, 2, 'ab', [1, 2, 3]]
list2 = []
列表推导式：list2 = [i for i in list1 if i < 50]
序列都可以进行的操作为：索引、切片、加、乘与检查成员
更新列表元素：list1[1] = 'new'
删除列表元素：del list1[1]
遍历列表： for i in list1:   #其余序列也都可以按这种方式遍历
            print(i)
列表函数：len(list)       返回列表元素个数 len(list)
        max(list)       返回列表元素最大值
        min(list)       返回列表元素最小值
        list(seq)       将序列转化为列表
列表方法：append(x)       在列表末尾添加新的对象 list.append(x)
        count(x)        统计x在列表中出现的次数 list.count(x)
        extend(seq)     在列表末尾一次性追加另一个序列中的多个值，seq可以为列表，元组，集合，字典(加key) list.extend(seq)
        index(x, y, z)  返回列表中x的第一个匹配性的索引位置，没找到会抛出异常，y为起始位置，z为结尾位置  list.index(x,y,z)
        insert(x, y)    将y插入到x位置上 list.insert(x,y)
        pop(x)          移除指定位置x出的元素，默认移除最后一个元素，并且返回该元素的值  list.pop(x)
        remove(x)       移除列表中x的第一个匹配值 list.remove(x)
        reverse()       反向列表中的元素 list.reverse()
        sort(reverse=False)对列表进行排序，reverse=False为升序(默认)，True为降序 list.sort(reverse=False)
        clear()         清空列表，类似于 del list[:]  list.clear()
        copy()          复制列表，返回复制后的新列表 list1 = list.copy



元组：
tup1 = (1, 2, 3, '12')
tup2 = (1,)
tup3 = ()
元素有序，不可修改，可重复
序列都可以进行的操作为：索引、切片、加、乘与检查成员
元组中的数据不可以修改，元组中的单个元素不能删除，但是我们可以删除整个元组  del tup1
遍历元组： for i in tup1:   #其余序列也都可以按这种方式遍历
            print(i)
元组函数：len(tuple)      返回元组中元素的个数
        max(tuple)      返回元组元素最大值
        min(tuple)      返回元组元素最小值
        tuple(seq)      将序列转化为元组



字典：
dict1 = {'A':'a', 'v': 2}
dict2 = {}
字典推导式：c = {i: i**2 for i in a if i < 60}
元素无序，可修改，关键字必须唯一不可重复，值可以重复
访问字典内的元素：dict1['A']   使用关键字进行访问，而不是索引值进行访问
修改字典内的元素：dict1['A'] = z
删除：del dict1['A']
遍历字典： for i in dict1:   #其余序列也都可以按这种方式遍历
            print(i)
字典函数：len(dict)       返回字典中的元素的个数
        str(dict)       以可打印的字符串表示
字典方法：clear()         清空字典 dict.clear()
        copy(dict)      复制字典，返回复制后的新字典 dict1 = dict.copy(dict)
        fromkeys(x,y)   创建一个新字典，以序列x为关键字，y为值（默认为None） dict.fromkeys(x,y)
        get(x, y)       返回指定键x的值，如果值不存在，则返回y(默认为None) dict.get(x,y)
        x in dict       判断x是否在字典中(关键字),返回True或False
        items()         返回可遍历的(键，值)元组数组，可以使用 list(dict.items()) 将结果转化为列表
        keys()          返回关键字的一个可迭代对象，可以使用list()转化为列表 dict.keys()
        values()        返回值的一个可迭代对象，可以使用list()转化为列表 dict.values()
        setdefault(x,y) 与get()类似,返回指定的键x的值，如果不存在，则返回y(默认为None),并将 x:y 加入到字典中 dict.setdefault(x,y)
        update(dict2)   将字典dict2更新到字典dict中 dict.update(dict2)
        pop(x, y)       删除字典中关键字x对应的键值，并返回被删除的关键字，如果x不在字典中，则返回y值 dict.pop(x,y)
        popitem()       随机返回并删除字典最后一对键和值，如果字典为空，则抛出异常 dict.popitem()



集合：
set1 = {1, 2, 'as'}
set2 = set()
集合推导式：b = {i for i in a if i > 60}
元素无序，可修改，不可重复，值唯一
遍历集合： for i in sett1:   #其余序列也都可以按这种方式遍历
            print(i)
集合差集：set1 - set2    集合set1中包含而set2中不包含的元素
集合并集：set1 | set2    集合set1或set2中包含的所有元素
集合交集：set1 & set2    集合set1与set2中都包含的元素
        set1 ^ set2    不同时包含于set1和set2中的元素  就是 并集 - 交集
集合方法：add(x)          为集合添加元素x set.add(x)
        update(set)     为集合添加新元素，set可以是元素或集合 set.update(set)
        clear()         清空集合 set.clear()
        copy(set)       复制集合，返回复制后的新集合 set1 = dict.copy(set)
        difference(set1)返回两个集合的差集 set.difference(set1)
        difference_update(set1)在原集合中移除两个集合中都存在的元素 set.difference_update(set1)
        discard(x)      删除集合中的x元素 set.discard(x)
        intersection(set1,set2,...)返回两个或多个集合的交集  set.intersection(set1,set2,...)
        intersection_update(set1,set2,...)在原集合中移除不重叠的元素，即只包含交集中的元素 set.intersection_update(set1,..)
        isdisjoint(set1)判断两个集合是否包含相同的元素，返回True或False  set.isdisjoint(set1) 包含 False 不包含 True
        issubset(set1)  判断set是否为set1的子集，返回True或False set.issubset(set1)
        issuperset(set1)判断set1是否为set的子集，返回True或False set.issuperset(set1)
        pop()           随机移除一个元素，并返回被移除的元素  set.pop
        remove(x)       移除集合中的指定元素x   set.remove(x)
        symmetric_difference(set1)返回两个集合中不重复的元素集合，即 ^ set.symmetric_difference(set1)
        symmetric_difference_update(set1)移除原集合中在set1中相同的元素，并将set1中不同的元素插入到当前集合中
        union(set1,set2,..)返回两个或两个以上集合的并集，重复的元素只会出现一次 set1.union(set1, set2,...)


条件控制：
if x>1:
    ...
elif y>1:
    ...
else:
    ...
使用 if-elif-else 来进行条件控制，没有 switch-case 语句


循环语句：
while x>1:
    ...
else:
    ...
else 语句是在循环条件不满足时，退出循环时执行的
for循环可以遍历任何序列的项目，如一个列表或者一个字符串
for <variable> in <sequence>:
    <statements>
else:
    <statements>
break 语句：       跳出循环,当使用break语句结束循环时，不会执行后面的 else语句
continue语句       跳出当前这一次循环
range(x, y, z) 函数:可以生成一个数列[x,y)，z为步长，默认从0开始
使用 range()语句 创建一个列表 list1 = list(range(1, 11))
pass 语句：        Python pass是空语句，是为了保持程序结构的完整性，不做任何事情，一般用做占位语句
while True:
     pass  # 等待键盘中断 (Ctrl+C)


迭代器与生成器：
迭代器：    迭代是Python最强大的功能之一，是访问集合元素的一种方式。
迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。
迭代器方法：iter(seq)     创建迭代器对象，seq可以是字符串，列表或元组等对象 x = iter(seq)
          next(x)       返回迭代器的下一个元素


函数：
def 函数名（参数列表）:
    函数体
可变对象：    列表，字典，集合
不可变对象：  数值，字符串，元组
Python函数的参数传递：不可变对象：相当于C++的值传递，传递的只是对象的值，在函数内部修改对象的值，不会影响对象本身
                   可变对象：  相当于C++的引用传递，它是将对象真正传递个函数，在函数内部修改对象的值，会改变对象本身
参数类型：必须参数：必需参数须以正确的顺序传入函数。调用时的顺序和数量必须和声明时的一样，按照声明时的顺序一个一个传递。 fun(1, 2)
        关键字参数：在调用时，不仅写入参数，还写入参数的名字，这样，允许顺序不一致。 fun(a=1, b=2) 或 fun(b=2,a=1)
        默认参数：调用函数时，如果没有传递参数，则会使用默认参数。 def fun(a, b=2)  设置默认参数时，从后向前的方式设置
        不定长参数：调用函数时，可以输入多个参数，不固定数量。def fun(a, *b) 加入了 * 的参数会以元组的形式导入参数，放在最末尾。
                    此时b就是一个元组，这些多余的参数都会存储在b这个元组里面。  fun(1,2,3,4,5)
                    参数带两个星号 ** 会以字典的形式导入参数。 def fun(a, **b) 调用时 fun(1, c=2, d=3, e=4) 要以这种形式写，不然报错
匿名函数：lambda的主体是一个表达式，而不是一个代码块。lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。
        声明： sum1 = lambda a, b: a + b        调用： print(sum1(1, 2))
return语句：语句用于退出函数，选择性地向调用方返回一个表达式。不带参数的return语句返回None, 当声明函数不写return语句时，默认返回None


数据结构：
列表：Python最常用的一种数据结构，元素有序，可修改，可重复
     作堆栈(后进先出)使用，使用append()方法将元素添加到栈顶，使用pop()方法，将元素从栈顶取出
     作队列(先进先出)使用，使用append()方法在队尾插入元素，使用pop(0)方法，在队头输出元素
     列表推导式：提供了从序列创建列表的简单途径。 [3*x for x in vec if x > 3]  [x*y for x in vec1 for y in vec2]
     3*4列表：matrix = [
...             [1, 2, 3, 4],
...             [5, 6, 7, 8],
...             [9, 10, 11, 12],
...          ]
元组：元素有序，不可修改，可重复
集合：元素无序，可修改，不可重复，值唯一
     基本功能包括关系测试和消除重复元素。
     集合创建时，会将里面重复的元素去掉，只保存一个，可以使用  x in set1  来判断成员是否在集合里面
     集合推导式：{x for x in 'abracadabra' if x not in 'abc'}
字典：元素无序，可修改，关键字必须唯一不可重复，值可以重复
     理解字典的最佳方式是把它看做无序的键=>值对集合。
     字典推导式：{x: x**2 for x in (2, 4, 6)}



模块：
导入模块： import fibo                        导入模块
         from fibo import fibo1, fibo2      把模块内（函数，变量的）名称导入到当前操作模块。推荐使用这种方式
         from fibo import *                 一次性的把模块中的所有（函数，变量）名称都导入到当前模块的字符表，不推荐使用
name属性:一个模块被另一个程序第一次引入时，其主程序将运行。如果我们想在模块被引入时，模块中的某一程序块不执行，
        我们可以用name属性来使该程序块仅在该模块自身运行时执行。
        if __name__ == '__main__':
            print('程序自身在运行')
        else:
            print('我来自另一模块')
dir() 函数:内置的函数 dir() 可以找到模块内定义的所有名称。以一个字符串列表的形式返回
          如果没有给定参数，那么 dir() 函数会罗列出当前定义的所有名称


输入与输出：
str()       函数返回一个用户易读的字符串表达形式
repr()      函数返回一个解释器易读的字符串表达形式
输出：          使用 print() 函数来进行输出，使用 str.format() 函数来格式化字符串
读取键盘输入：   使用 input() 函数输入  str = input("请输入：")
               输入的内容是一个字符串，如果要获得一个整型，得转化数据类型 int(str)  float(str)


读和写文件：
open(file, mode)    file 必需，文件路径（相对或者绝对路径)(字符串)，mode 打开文件的模式，只读，读写，追加等
                    mode:https://www.nowcoder.com/tutorial/10005/43eef86e07a9463bbb4e32ad0bd6f790
                         mode是根据对文件的操作需求来设置的，需要怎么操作，就设置哪些东西
                         常用：r+      以读写方式打开文件，文件指针将会放在文件的开头，写入时，在开头插入。
                              w+      以读写方式打开文件，文件指针将会放在文件的开头，写入时，原内容会删除。
                              a+      以读写方式打开文件，文件指针将会放在文件的结尾，写入时，在末尾追加。
file对象：使用open函数来创建
常用函数：close()         关闭一个已打开的文件，每次使用完文件后，使用 file.close() 关闭文件是个好习惯
        flush()         刷新缓冲区，即将缓冲区中的数据立刻写入文件，同时清空缓冲区，一般是文件关闭时才会刷新缓冲区(写入文件)。
        isatty()        检测文件是否连接到一个终端设备，如果是返回 True，否则返回 False。 file.isatty()
        read(size)      从文件中读取指定的字节数 size ,默认全部读取 file.read(size)
        readline(size)  一次从文件中读取一整行，包括 \n size 为一行中的字节数,一次只读取一行
        readlines(size) 读取所有行，并返回列表(每个元素都是文件中的一行)。可由 for... in ... 结构进行处理，输出。
        tell()          返回文件当前指针位置(每次读取后，指针都会向后移，此时不能访问前面的) file.tell()
        seek(x, y)      移动指针到指定位置，并返回移动后的位置，失败则返回-1。x代表需要移动的字节数，如果是负数表示从倒数第几位开始。
                        y表示要从哪个位置开始偏移，0为开头，1为当前位置，2为末尾，默认为0
                        x为正，代表向右移，为负，代表向左移。y表示开始移动的起始地址。
                        f.seek(5) 移动到文件的第6个字节
                        f.seek(-3,2) 移动到文件倒数第三个字节,必须使用b模式(rb)打开文件,否则只允许从文件头开始计算相对位置
        truncate(size)  用于从文件的首行首字节开始截断，截断文件为 size 个字节，其余字节将被删除(文件会改) file.truncate(size)
        write(str)      向文件中写入字符串 str ,返回的是写入的字符长度。只能写入字符串，不能写入其他的东西
        writelines(str) 用于向文件中写入一序列的字符串。可以写字符串以外的，例如列表
                        seq = ["牛客教程 1\n", "牛客教程 2"]
                        fo.writelines( seq )


OS 文件及目录方法：
https://www.nowcoder.com/tutorial/10005/709219b6a7ca4739a44745b2e65bd74f


错误和异常：
try except 语句
try:
    f = open('myfile.txt')
    s = f.readline()
    i = int(s.strip())
except OSError as err:
    print("OS error: {0}".format(err))
except ValueError:
    print("Could not convert data to an integer.")
except:
    print("Unexpected error:", sys.exc_info()[0])
    raise
try except 语句还有一个可选的else子句，如果使用这个子句，那么必须放在所有的except子句之后。这个子句将在try子句没有发生任何异常的时候执行。
for arg in sys.argv[1:]:
    try:
        f = open(arg, 'r')
    except IOError:
        print('cannot open', arg)
    else:
        print(arg, 'has', len(f.readlines()), 'lines')
        f.close()
使用 else 子句比把所有的语句都放在 try 子句里面要好，这样可以避免一些意想不到的、而except又没有捕获的异常。
try:
    this_fails()
except ZeroDivisionError as err:
    print('Handling run-time error:', err)
raise 语句    抛出一个指定的异常



面向对象：
面向对象技术简介：类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。
               方法：类中定义的函数。
               类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。
               数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据。
               方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。
               局部变量：定义在方法中的变量，只作用于当前实例的类。
               实例变量：在类的声明中，属性是用变量来表示的。这种变量就称为实例变量。
               继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。
               实例化：创建一个类的实例，类的具体对象。
               对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。
Python中的类提供了面向对象编程的所有基本功能：类的继承机制允许多个基类，派生类可以覆盖基类中的任何方法，方法中可以调用基类中的同名方法。
类定义：class ClassName:
             <statement-1>
             .
             .
             .
             <statement-N>
类对象：
class MyClass:
    """一个简单的类实例"""
    i = 12345
    def f(self):
        return 'hello world'

# 实例化类
x = MyClass()

# 访问类的属性和方法
print("MyClass 类的属性 i 为：", x.i)
print("MyClass 类的方法 f 输出为：", x.f())

构造方法：    init()  def __init__(self):
            init() 方法可以有参数，参数通过 init() 传递到类的实例化操作上。 我们可以在调用类时，向类中传递一些参数。
                    def __init__(self, realpart, imagpart)    x = Complex(3.0, -4.5)  实例化类，并传递一些参数
self:       代表类的实例，而非类,类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self。
类的方法:    在类的内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self, 且为第一个参数，self 代表的是类的实例。
            公有属性： age = 0    私有属性： __weight = 0  私有属性在类外部无法直接进行访问，子类中也不能访问
继承:       class DerivedClassName(BaseClassName1):
                <statement-1>
                .
                .
                .
                <statement-N>
            需要注意圆括号中基类的顺序，若是基类中有相同的方法名，而在子类使用时未指定，python从左至右搜索
            即方法在子类中未找到时，从左到右查找基类中是否包含方法。基类可以有多个
方法重写:    如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法,子类中的方法名与父类中的方法名相同
            super() 用于调用父类(超类)的一个方法。 是写在子类中调用父类中方法的一个函数
类属性与方法：类的私有属性：      __private ,不能在类的外部被使用或直接访问。在类内部的方法中使用时 self.__privates。子类也不行
            类的方法:        在类的内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self，
                            且为第一个参数，self 代表的是类的实例。
            类的私有方法:     def __private ,两个下划线开头，声明该方法为私有方法，只能在类的内部调用 ，不能在类的外部调用。
类的专有方法：init : 构造函数，在生成对象时调用
            del : 析构函数，释放对象时使用
            repr : 打印，转换
            setitem : 按照索引赋值
            getitem: 按照索引获取值
            len: 获得长度
            cmp: 比较运算
            call: 函数调用
            add: 加运算
            sub: 减运算
            mul: 乘运算
            truediv: 除运算
            mod: 求余运算
            pow: 乘方


命名空间和作用域：
global和 nonlocal 关键字：     当内部作用域想修改外部作用域的变量时，就要用到global和nonlocal关键字了。
                             global 用于在函数内部使用外部的全局变量
                             nonlocal 用于在函数内的嵌套作用域中，要使用函数作用域的变量时使用






















